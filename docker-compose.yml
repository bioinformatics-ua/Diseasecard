version: '3'
services:
    mysql:
        container_name: dc_mysql
        image: mysql:5.6
        restart: unless-stopped
        command: --default-authentication-plugin=mysql_native_password
        ports:
            - ${MYSQL_PORT}
        expose:
            - 3306
        environment:
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        volumes:
            - ${MYSQL_VOLUME}:/docker-entrypoint-initdb.d/
            - mysql_data:/var/lib/mysql
        networks:
            - backend
      
    dc_redis:
        container_name: dc_redis
        restart: unless-stopped
        image: redis:2.6.17
        ports:
            - ${REDIS_PORT}
        volumes:
            - ${REDIS_VOLUME}:/usr/local/etc/redis/redis.conf
            - redis_data:/data
        networks:
            - backend
  
    dc_solr:
        container_name: dc_solr
        restart: unless-stopped
        build: ./docker/solr
        ports:
            - ${SOLR_PORT}
        volumes:
            - ${SOLR_VOLUME}:/opt/solr/solr/collection1/conf
            - solr_data:/opt/solr/solr/collection1/data
        networks:
            - backend   

    dc_backend:
        env_file: .env
        restart: unless-stopped
        container_name: dc_backend
        depends_on:
            - mysql
            - dc_redis
            - dc_solr
        build: ./backend
        ports:
            - ${BACKEND_PORT}:8080
        links:
            - mysql:container_mysql
            - dc_redis:container_redis
            - dc_solr:container_solr
        networks:
            - backend
        environment:
            - WAIT_HOSTS=mysql:3306

    dc_reverseproxy:
        container_name: dc_reverseproxy
        restart: unless-stopped
        build: ./docker/reverseproxy
        command: ${COMMAND_REVERSEPROXY}
        ports:
            - ${REVERSEPROXY_PORT}:80
        links:
            - dc_frontend:container_frontend
            - dc_admin:container_admin
            - dc_backend:container_backend
        networks:
            - backend
        
    dc_frontend:
        container_name: dc_frontend
        restart: unless-stopped
        stdin_open: true        
        depends_on:
            - dc_backend
        build: 
            context: ./frontend/
            target: ${TARGET_FRONTEND}
            args:
                - SERVERNAME=${SERVERNAME}
                - BACKEND_PORT=${BACKEND_PORT}
        command: ${COMMAND_FRONTEND}
        ports:
            - ${FRONTEND_PORT}
        links:
            - dc_backend:container_backend
            - dc_admin:container_admin
        networks:
            - backend
            
    dc_admin:
        container_name: dc_admin
        restart: unless-stopped
        stdin_open: true        
        depends_on:
            - dc_backend
        build: 
            context: ./admin/
            target: ${TARGET_ADMIN}
            args:
                - SERVERNAME=${SERVERNAME}
                - BACKEND_PORT=${BACKEND_PORT}
        command: ${COMMAND_ADMIN}
        ports:
            - ${ADMIN_PORT}
        links:
            - dc_backend:container_backend
        networks:
            - backend


networks:
    backend:
        driver: "bridge"

volumes:
    redis_data:
    mysql_data:
    solr_data: